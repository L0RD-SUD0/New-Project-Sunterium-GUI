loadingnamegui = true -- Set this to true if you want the GUI Name loading like Project Sunterium--

local GUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/L0RD-SUD0/New-Project-Sunterium-GUI/refs/heads/main/zzz"))() -- BTW THIS IS A SOURCE CODE! You can modify it by yourself! --

-- Create Window --

local Window = GUI:NewWindow({
    Name = "Window Example", -- Name of window | string, required
    Keybind = "RightShift", -- Keybind to open and close this window | string, required
    UseCoreGui = true, -- Whether to use coregui / gethui as the gui parent | bool, optional
    PrintCredits = true -- Whether to print ui library credits and info in the console | bool, optional
})

-- Create Tab --

local Tab = Window:NewTab({
    Name = "Tab Example", -- Name of the tab | string, required
    Icon = "rbxassetid://1234" -- Icon for the tab button | string, optional
})

--[[ Edit Tab

Tab:Edit({
    Name = "Tab Example", -- Name of the tab | string, optional
    Icon = "rbxassetid://1234" -- Icon for the tab button | string, optional
})

]]--

-- Create a separator (A separator is just a line inbetween tab buttons, only for a stylistic purpose) --

local separator = Window:NewSeparator()

-- Edit a section --

local Section = Tab:NewSection({
    Name = "Section Example", -- Name of the section | string, required
    Description = "Description Example", -- Description of the section | string, optional 
})

-- Create A Button --

local Button = Section:NewButton({
    Name = "Example Button", -- Name of the button | string, required
    Description = "Example Description",  -- Description of the button | string, optional 
    Callback = function(value) -- code executed on interaction with the element | function,  optional
        -- Put your script here --
    end,
})

--[[ Edit Button 

Button:Edit({
    Name = "Example Button", -- Name of the button | string, optional
    Description = "Example Description",  -- Description of the button | string, optional 
    Callback = function(value) -- code executed on interaction with the element | function,  optional
        -- Put your script here ( PUT THE SAME SCRIPT IF YOU DON'T WANT TO MAKE THE BUTTON EXECUTE ANOTHER SCRIPT! ) --
    end,
})

]]--

-- Create A Toggle --

local Toggle = Section:NewToggle({
    Name = "Example Toggle", -- Name of the toggle | string, required
    Description = "Example Description",  -- Description of the toggle | string, optional 
    CurrentState = true, -- default state of the toggle | bool, optional
    Callback = function(value) -- code executed on interaction with the element | function,  optional
        -- Put your script here --
    end,
})

--[[Edit a toggle

Toggle:Edit({
    Name = "Example Toggle", -- Name of the toggle | string, optional
    Description = "Example Description" , -- Description of the toggle | string, optional 
    CurrentState = true, -- default state of the toggle | bool, optional
    Callback = function(value) -- code executed on interaction with the element | function,  optional
        -- Put your script here ( PUT THE SAME SCRIPT IF YOU DON'T WANT TO MAKE THE BUTTON EXECUTE ANOTHER SCRIPT! ) --
    end,
})

]]--

-- Create a textbox --

local TextBox = Section:NewTextBox({
    Name = "Example TextBox", -- Name of the textbox | string, required
    PlaceholderText = "Text here..", -- placeholder text of the textbox | string, optional
    Text = "Lorem Impulsum", -- text of the textbox | string, optional
    Trigger = "FocusLost", -- trigger that will execute the callback ( FocusLost or TextChanged ) | string, optional
    Callback = function(value) -- code executed on interaction with the element | function,  optional
        -- Put your script here --
    end,
})

--[[ Edit a textbox 

TextBox:Edit({
    Name = "Example TextBox", -- Name of the textbox | string, optional
    PlaceholderText = "Text here..", -- placeholder text of the textbox | string, optional
    Text = "Lorem Impulsum", -- text of the textbox | string, optional
    Trigger = "FocusLost", -- trigger that will execute the callback ( FocusLost or TextChanged ) | string, optional
    Callback = function(value) -- code executed on interaction with the element | function,  optional
        -- Put your script here ( PUT THE SAME SCRIPT IF YOU DON'T WANT TO MAKE THE BUTTON EXECUTE ANOTHER SCRIPT! ) --
    end,
})

]]--

-- Create a dropdown --

local Dropdown = Section:NewDropdown({
    Name = "Example Dropdown", -- Name of the dropdown | string, required
    Description = "Example Description",  -- Description of the dropdown | string, optional 
    Choices = {"Option 1", "Option 2"}, -- the choices the user can choose from | table, required
    CurrentState = "Option 1", -- default choice selected | string, required
    Callback = function(value) -- code executed on interaction with the element | function,  optional
        -- Put your script here --
    end,
})

--[[Edit a dropdown

Dropdown:Edit({
    Name = "Example Dropdown", -- Name of the dropdown | string, optional
    Description = "Example Description",  -- Description of the dropdown | string, optional 
    Choices = {"Option 1", "Option 2"}, -- the choices the user can choose from | table, optional
    CurrentState = "Option 1", -- default choice selected | string, optional
    Callback = function(value) -- code executed on interaction with the element | function,  optional
        -- Put your script here ( PUT THE SAME SCRIPT IF YOU DON'T WANT TO MAKE THE BUTTON EXECUTE ANOTHER SCRIPT! ) --
    end,
})

]]--

-- Create a slider --

local Slider = Section:NewSlider({
    Name = "Example Slider", -- Name of the dropdown | string, required
    Description = "Example Description",  -- Description of the dropdown | string, optional 
    MinMax = {"0", "100"}, -- the minimum and maximum states of the slider | table, required
    Increment = 5, -- the increment the slider increases by | number required
    CurrentValue = 20, -- default value | number, required
    Callback = function(value) -- code executed on interaction with the element | function,  optional
        -- Put your script here --
    end,
})

--[[Edit a slider

Slider:Edit({
    Name = "Example Slider", -- Name of the dropdown | string, optional
    Description = "Example Description",  -- Description of the dropdown | string, optional 
    MinMax = {"0", "100"}, -- the minimum and maximum states of the slider | table, optional
    Increment = 5, -- the increment the slider increases by | number optional
    CurrentValue = 20, -- default value | number, optional
    Callback = function(value) -- code executed on interaction with the element | function,  optional
        -- Put your script here ( PUT THE SAME SCRIPT IF YOU DON'T WANT TO MAKE THE BUTTON EXECUTE ANOTHER SCRIPT! ) --
    end,
})

]]--


--[[ Remove a element (This works on ALL elements.)

Element:Remove()

]]--
